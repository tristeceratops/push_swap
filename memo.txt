ON REPART DE 0

créer des cas spécifiques pour petits jeux de données (2 - 3 - 4 et 5)

LIS ALGO:
Longest Increasing Subsequences ou Plus Grande sous séquences croissantes
Calculer la LIS et la garder dans A, le reste est déplacé dans B

ensuite pour chaque valeurs dans B, calculer deux valeurs :
-Le nombre de déplacement pour accéder à TOP B (valeur -négative quand on doit utiliser reverse rotation) (MA)
-et le nombre de rotation qu'il faut faire dans A pour pouvoir le placer au bon endroit (MB)

à chaque itération de la boucle, on recalcules ces deux valeurs et on déplace de B à A le nombre qui créera le moins de mouvement
	|	mov_b +		|	mov_b -
--------|-----------------------|-----------------------
mov_a +	|   max(mov_a, mov_b)	|   mov_a + |mov_b|
--------|-----------------------|-----------------------
mov_a -	|  |mov_a| + mov_b	|  |min(mov_a, mov_b)|

https://github.com/sisittu99/push_swap/blob/master/README_EN.md#choosing-the-best-number

Génération de la LIS sous forme de t_list
(récursivité ???) (proche du ten queens puzzle ???)
générée récursivement la première LIS qu'on gardera et qu'on comparera à la prochaine où on gardera la plus grande

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <limits.h>

typedef struct s_list
{
	void			*content;
	struct s_list	*next;
	struct s_list   *prev;
}	t_list;

typedef struct s_stack
{
	t_list	*top;
}	t_stack;

int	ft_lstsize(t_list *lst)
{
	int	size;

	size = 0;
	while (lst != NULL)
	{
		lst = lst->next;
		size++;
	}
	return (size);
}

int get_max(t_list* list) {
    int max_value = INT_MIN;

    while (list != NULL) {
        if ((int)(intptr_t)list->content > max_value) {
            max_value = (int)(intptr_t)list->content;
        }
        list = list->next;
    }

    return max_value;
}

int get_min(t_list* list) {
    int min_value = INT_MAX;

    while (list != NULL) {
        if ((int)(intptr_t)list->content < min_value) {
            min_value = (int)(intptr_t)list->content;
        }
        list = list->next;
    }

    return min_value;
}

t_list	*ft_lstnew(void *content)
{
	t_list	*node;

	node = malloc(sizeof(*node));
	node -> content = content;
	node -> next = NULL;
	node -> prev = NULL;
	return (node);
}

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*last;

	if (*lst == NULL)
		*lst = new;
	else
	{
		last = *lst;
		while (last->next != NULL)
		{
			last = last->next;
		}
		new->prev = last->next;
		last->next = new;
	}
}

int* get_mov_a(t_stack* stack_a, t_stack* stack_b) {
    int size_b = ft_lstsize(stack_b->top);
    int* mov_a = (int*)malloc(size_b * sizeof(int));
    t_list *temp_a = stack_a -> top;
    t_list *temp_b = stack_b -> top;
    if (!mov_a)
        return NULL;
    int i = 0;
    int j = 0;
    int min;
    while (temp_b != NULL)
    {
        j = 1;
        temp_a = stack_a -> top;
        int max = get_min(stack_a -> top) - 1;
        while (temp_a != NULL)
        {
            if ((int)(intptr_t)temp_a->content < (int)(intptr_t)temp_b->content && (int)(intptr_t)temp_a->content > max)
            {
                max = (int)(intptr_t)temp_a->content;
                mov_a[i] = j;
            }
            j++;
            temp_a = temp_a->next;
        }
        if (max == get_min(stack_a -> top) - 1)
        {
            int z = 0;
            t_list *temp = stack_a->top;
            while (temp != NULL)
            {
                if ((int)(intptr_t)temp->content == get_min(stack_a->top))
                {
                    mov_a[i] = z;
                }
                z++;
                temp = temp->next;
            }
        }
        i++;
        temp_b = temp_b->next;
    }
    return mov_a;
}

int main() {
    t_stack stack_a;
    t_stack stack_b;

    // Initialize stack_a and stack_b here
    stack_a.top = NULL; // Assuming t_stack has a top member pointing to the top of the stack
    stack_b.top = NULL; // Same assumption for stack_b

    // Assuming you have a function to push elements onto the stack
    // For example, let's push some elements onto stack_a and stack_b
    // Assuming push function is defined elsewhere
    ft_lstadd_back(&stack_a.top, ft_lstnew((void *)(intptr_t)4));
    ft_lstadd_back(&stack_a.top, ft_lstnew((void *)(intptr_t)7));
    ft_lstadd_back(&stack_a.top, ft_lstnew((void *)(intptr_t)1));

    ft_lstadd_back(&stack_b.top, ft_lstnew((void *)(intptr_t)2));
    ft_lstadd_back(&stack_b.top, ft_lstnew((void *)(intptr_t)3));
    ft_lstadd_back(&stack_b.top, ft_lstnew((void *)(intptr_t)5));
    ft_lstadd_back(&stack_b.top, ft_lstnew((void *)(intptr_t)6));
    ft_lstadd_back(&stack_b.top, ft_lstnew((void *)(intptr_t)8));
    ft_lstadd_back(&stack_b.top, ft_lstnew((void *)(intptr_t)19));
    ft_lstadd_back(&stack_b.top, ft_lstnew((void *)(intptr_t)0));

    int* mov_a = get_mov_a(&stack_a, &stack_b);

    // Print the mov_a array
    for (int i = 0; i < 7; i++) {
        printf("%d ", mov_a[i]);
    }

    free(mov_a);

    return 0;
}

créer mov_a
stack_a		stack_b
1				0
4				2
7				5
				8
mov_a = 0 1 2 -1